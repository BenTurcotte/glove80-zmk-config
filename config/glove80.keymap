
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    macros {
        ps_m: powershell_macro {
            label = "POWERSHELL_MACRO";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            tap-ms = <10>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp P>
                , <&macro_tap &kp O>
                , <&macro_tap &kp W>
                , <&macro_tap &kp E>
                , <&macro_tap &kp R>
                , <&macro_tap &kp S>
                , <&macro_tap &kp H>
                , <&macro_tap &kp E>
                , <&macro_tap &kp L>
                , <&macro_tap &kp L>
                ;
        };
        ts_m: task_scheduler_macro {
            label = "TASK_SCHEDULER_MACRO";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            tap-ms = <10>;
            #binding-cells = <0>;
            bindings                
                = <&macro_tap &kp S &kp C &kp H &kp T &kp A &kp S &kp K &kp S &kp SPACE>
                , <&macro_tap &kp FSLH &kp C &kp R &kp E &kp A &kp T &kp E &kp SPACE>
                , <&macro_tap &kp FSLH &kp T &kp N &kp SPACE>
                , <&macro_tap &kp DQT &kp M &kp S &kp G &kp DQT &kp SPACE>
                , <&macro_tap &kp FSLH &kp T &kp R &kp SPACE>
                , <&macro_tap &kp DQT &kp C &kp M &kp D &kp DQT &kp SPACE>
                , <&macro_tap &kp FSLH &kp S &kp C &kp SPACE>
                , <&macro_tap &kp O &kp N &kp C &kp E &kp SPACE>
                , <&macro_tap &kp FSLH &kp S &kp D &kp SPACE>
                , <&macro_tap &kp M &kp M &kp FSLH &kp D &kp D &kp FSLH &kp Y &kp Y &kp Y &kp Y &kp SPACE>
                , <&macro_tap &kp FSLH &kp S &kp T &kp SPACE>
                , <&macro_tap &kp H &kp H &kp COLON &kp M &kp M>
                ;
        };
        left42_m: left_42_times_macro {
            label = "LEFT_42_TIMES_MACRO";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            tap-ms = <10>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>
                , <&macro_tap &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>
                , <&macro_tap &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>
                , <&macro_tap &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>
                , <&macro_tap &kp LEFT &kp LEFT>
                ;
        };
        right7_m: right_7_times_macro {
            label = "RIGHT_7_TIMES_MACRO";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            tap-ms = <10>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>
                ;
        };
        right15_m: right_15_times_macro {
            label = "RIGHT_7_TIMES_MACRO";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            tap-ms = <10>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>
                , <&macro_tap &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>
                , <&macro_tap &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>
                ;
        };
        cleardate_lr_m: clear_date_field_left_to_right_macro {
            label = "CLEAR_DATE_FIELD_LEFT_TO_RIGHT_MACRO";
            compatible = "zmk,behavior-macro";
            wait-ms = <10>;
            tap-ms = <10>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp DEL &kp DEL &kp RIGHT>
                , <&macro_tap &kp DEL &kp DEL &kp RIGHT>
                , <&macro_tap &kp DEL &kp DEL &kp DEL &kp DEL>
                , <&macro_tap &kp LEFT &kp LEFT>
                ;
        };
        rgb_mo_1: rgb_mo_1 {
            label = "RGB_MO_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press &mo 1>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
                , <&macro_pause_for_release>
                , <&macro_release &mo 1>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>;
        };
    };
    behaviors {
        my_ht: my_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        my_shft_ht: my_shift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_SHIFT_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <40 41 42 43 44 45>;
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <34 35 36 37 38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
      &none          &none          &none       &kp LG(E)                &none                                                                                                             &none                &none          &none          &none       &none
      &none          &none          &none     &key_repeat               &kp F7  &kp F12                                                                                    &none           &none          &key_repeat          &none          &none       &none
      &none          &kp Q          &kp W           &kp F                &kp P    &kp V                                                                                    &kp J           &kp L                &kp U          &kp Y        &kp SQT       &none
      &none  &my_ht LGUI A  &my_ht LALT R  &my_ht LCTRL S  &my_shft_ht LSHFT T    &kp G                                                                                    &kp H  &my_shft_ht RSHFT N  &my_ht RCTRL E  &my_ht RALT I  &my_ht RGUI O       &none
      &none          &kp Z          &kp X           &kp C                &kp D    &kp B     &lt 1 BSPC  &lt 3 RET  &lt 7 C_AC_SEARCH  &lt 7 K_APP    &kp DEL    &kp BSPC   &kp K           &kp M            &kp COMMA        &kp DOT       &kp FSLH       &none
  &magic 2 0         &none          &none           &none           &key_repeat             &lt 5 SPACE  &lt 6 TAB          &lt 4 ESC    &lt 4 ESC  &lt 3 RET  &lt 1 BSPC            &key_repeat            &kp RCTRL       &kp RALT       &kp RGUI  &magic 2 0
            >;
        };

        layer_Num {
            bindings = <
 &trans     &trans  &trans  &trans  &trans                                                                              &trans     &trans    &trans    &trans  &trans
 &trans     &trans  &trans  &trans  &trans     &trans                                                        &trans     &trans     &trans    &trans    &trans  &trans
 &trans   &kp LBKT  &kp N7  &kp N8  &kp N9   &kp RBKT                                                        &trans     &trans     &trans    &trans    &trans  &trans
 &trans   &kp SEMI  &kp N4  &kp N5  &kp N6  &kp EQUAL                                                        &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
 &trans  &kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH  &kp N0  &kp MINUS  &trans  &trans  &kp ESC  &kp BSPC  &trans     &trans     &trans    &trans    &trans  &trans
 &trans     &trans  &trans  &trans  &trans             &kp N0  &kp MINUS  &trans  &trans  &kp ESC  &kp BSPC             &trans     &trans    &trans    &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none  &rgb_ug RGB_EFR   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Sym {
            bindings = <
 &trans     &trans    &trans     &trans     &trans                                                                            &trans     &trans    &trans    &trans  &trans
 &trans     &trans    &trans     &trans     &trans    &trans                                                       &trans     &trans     &trans    &trans    &trans  &trans
 &trans   &kp LBRC  &kp AMPS   &kp STAR   &kp LPAR  &kp RBRC                                                       &trans     &trans     &trans    &trans    &trans  &trans
 &trans  &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS                                                       &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
 &trans  &kp TILDE  &kp EXCL     &kp AT   &kp HASH  &kp PIPE  &kp RPAR  &kp UNDER  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans  &trans
 &trans     &trans    &trans     &trans     &trans            &kp RPAR  &kp UNDER  &trans  &trans  &trans  &trans             &trans     &trans    &trans    &trans  &trans
            >;
        };

        layer_Numpad {
            bindings = <
 &trans           &trans     &trans     &trans     &trans                                                                                    &trans    &trans     &trans    &trans  &trans
 &trans           &trans     &trans     &trans     &trans        &trans                                                           &trans     &trans    &trans     &trans    &trans  &trans
 &trans  &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_PLUS                                                           &trans     &trans    &trans     &trans    &trans  &trans
 &trans     &kp KP_SLASH  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_EQUAL                                                           &trans  &kp RSHFT  &kp RALT  &kp RCTRL  &kp RGUI  &trans
 &trans       &kp KP_DOT  &kp KP_N1  &kp KP_N2  &kp KP_N3    &kp KP_DOT  &kp KP_N0  &kp KP_MINUS  &trans  &trans  &trans  &trans  &trans     &trans    &trans     &trans    &trans  &trans
 &trans           &trans     &trans     &trans     &trans                &kp KP_N0  &kp KP_MINUS  &trans  &trans  &trans  &trans             &trans    &trans     &trans    &trans  &trans
            >;
        };

        layer_Nav {
            bindings = <
 &trans    &trans    &trans     &trans     &trans                                                                             &trans     &trans     &trans     &trans  &trans
 &trans    &trans    &trans     &trans     &trans  &trans                                                           &trans    &trans     &trans     &trans     &trans  &trans
 &trans    &trans    &trans     &trans     &trans  &trans                                                          &kp INS    &trans     &trans     &trans     &trans  &trans
 &trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                                         &kp CAPS  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &trans
 &trans  &kp LEFT  &kp DOWN     &kp UP  &kp RIGHT  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp PAUSE_BREAK  &kp HOME  &kp PG_UP  &kp PG_DN    &kp END  &trans
 &trans    &trans    &trans     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans                     &trans     &trans     &trans     &trans  &trans
            >;
        };

        layer_Fn {
            bindings = <
 &trans    &trans    &trans     &trans     &trans                                                                  &trans   &trans   &trans   &trans  &trans
 &trans    &trans    &trans     &trans     &trans  &trans                                                  &trans  &trans   &trans   &trans   &trans  &trans
 &trans    &trans    &trans     &trans     &trans  &trans                                                  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
 &trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                                  &trans  &kp F5   &kp F6   &kp F7   &kp F8  &trans
 &trans    &trans    &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F1   &kp F2   &kp F3   &kp F4  &trans
 &trans    &trans    &trans     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans   &trans   &trans   &trans  &trans
            >;
        };

        layer_Macro {
            bindings = <
 &ts_m   &left42_m  &right7_m  &right7_m  &cleardate_lr_m                                                                                  &trans  &trans  &trans                   &trans  &trans
 &trans     &trans     &trans     &trans           &trans  &trans                                                  &trans                  &trans  &trans  &trans                   &trans  &trans
 &trans     &trans     &trans     &trans            &ps_m  &trans                                                  &trans                  &trans  &trans  &trans                   &trans  &trans
 &trans     &trans     &trans     &trans           &trans  &trans                                                  &trans  &kp LG(RC(LEFT_ARROW))  &trans  &trans  &kp LG(RC(RIGHT_ARROW))  &trans
 &trans     &trans     &trans     &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans                   &trans  &trans
 &trans     &trans     &trans     &trans           &trans          &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans                   &trans  &trans
            >;
        };

    };
};
